<?php

/**
 * @file
 * Entity Registration waitlist functionality
 */

/**
 * Implements hook_registration_entity_settings().
 */
function registration_waitlist_registration_entity_settings($settings) {
  // add a settings element to enable adding registrations to the waitlist
  return array(
    'registration_waitlist_enable' => array(
      '#type' => 'checkbox',
      '#title' => t('Enable wait list'),
      '#description' => t('When wait list is enabled, registrations made after capacity has been reached will be set to the wait list state.'),
      '#default_value' => isset($settings['settings']['registration_waitlist_enable']) ? $settings['settings']['registration_waitlist_enable'] : array()
    )
  );
}

/**
 * Implements hook_default_ENTITY_TYPE().
 */
function registration_waitlist_default_registration_state() {
  $defaults = array();
  $defaults['registration_waitlist'] = entity_create('registration_state', array(
    'name' => 'registration_waitlist',
    'label' => 'Wait list',
    'description' => 'Special state for registrations after capacity is reached.',
    'default_state' => FALSE,
    'active' => FALSE,
    'show_on_form' => TRUE,
    'weight' => 0,
  ));
  return $defaults;
}

/**
 * Implements hook_registration_status_alter().
 *
 */
function registration_waitlist_registration_status_alter(&$status, $context) {
  // FALSE was returned by registration_status(), check if the waitlist should be active
  if (!$status && registration_waitlist_active($context['entity_type'], $context['entity_id'], $context['settings'])) {
    $status = TRUE;
  }
}

/**
 * Implements hook_entity_presave().
 */
function registration_waitlist_entity_presave($entity, $type) {
  if ($type == 'registration') {
    if (registration_waitlist_active($entity->entity_type, $entity->entity_id)) {
      $active_states = registration_get_active_states();

      // Check that the state being saved is active
      if (in_array($entity->state, $active_states)) {
        // Check that the old state (if there is one) is not already active
        if ( (isset($entity->original) && !in_array($entity->original->state, $active_states) )
          || (!isset($entity->original)) ) {
          drupal_set_message(t('Registration placed on the waitlist.'), 'status');
          // Set the registration state to waitlist
          $waitlist_state = registration_get_states('registration_waitlist');
          $entity->state = $waitlist_state->registration_state_id;
        }
      }
    }
  }
}

/**
 * Determine if the waitlist is active for a given registration
 *
 * @param $entity_type
 * @param $entity_id
 * @param $settings
 *
 * @return bool
 */
function registration_waitlist_active($entity_type, $entity_id, $settings = NULL) {
  if (!$settings) {
    $settings = registration_entity_settings($entity_type, $entity_id);
  }

  $active = $settings['status'];
  $open = isset($settings['open']) ? strtotime($settings['open']) : NULL;
  $close = isset($settings['close']) ? strtotime($settings['close']) : NULL;
  $now = REQUEST_TIME;

  // only explore other settings if main status is enabled
  if ($active) {
    // check open date range
    if (isset($open) && ($now < $open)) {
      $active = FALSE;
    }
    // check close date range
    elseif (isset($close) && ($now >= $close)) {
      $active = FALSE;
    }

    if ( !registration_has_room($entity_type, $entity_id)
      && isset($settings['settings']['registration_waitlist_enable'])
      && $settings['settings']['registration_waitlist_enable'] ) {
      // Registration is full and waitlist is enabled
      $active = TRUE;
    }
  }

  return $active;
}



