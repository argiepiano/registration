<?php

/**
 * @file
 * Module file for registrations.
 */

module_load_include('inc', 'registration', 'includes/registration.entity');
module_load_include('inc', 'registration', 'includes/registration.field');

/**
 * Implements hook_menu().
 */
function registration_menu() {
  $items['registration/%registration'] = array(
    'title callback' => 'registration_page_title',
    'title arguments' => array(1),
    'page callback' => 'registration_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
  );
  $items['registration/%registration/view'] = array(
    'title' => 'View',
    'page callback' => 'registration_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['registration/%registration/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_form', 1),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.forms.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['registration/%registration/delete'] = array(
    'title' => 'Delete Registration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_delete_confirm', 1),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.forms.inc',
  );

  // entity local tasks
  foreach (registration_get_registration_instances() as $instance) {
    $type = $instance['entity_type'];
    if (!in_array($type, array('registration', 'registration_type'))) {
      $items[$type . '/%entity_object/register'] = array(
        'load arguments' => array($type),
        'title' => 'Register',
        'page callback' => 'registration_register_page',
        'page arguments' => array(0, 1),
        'access callback' => 'registration_register_page_access',
        'access arguments' => array(0, 1),
        'file' => 'includes/registration.forms.inc',
        'type' => MENU_LOCAL_TASK,
      );
      $items[$type . '/%entity_object/registrations'] = array(
        'load arguments' => array($type),
        'title' => 'Manage Registrations',
        'page callback' => 'registration_registrations_page',
        'page arguments' => array(0, 1),
        'access callback' => 'registration_administer_registrations_access',
        'access arguments' => array(0, 1),
        'type' => MENU_LOCAL_TASK,
      );
      $items[$type . '/%entity_object/registrations/list'] = array(
        'load arguments' => array($type),
        'title' => 'Registrations',
        'page callback' => 'registration_registrations_page',
        'page arguments' => array(0, 1),
        'access callback' => 'registration_administer_registrations_access',
        'access arguments' => array(0, 1),
        'type' => MENU_DEFAULT_LOCAL_TASK,
      );
      $items[$type . '/%entity_object/registrations/settings'] = array(
        'load arguments' => array($type),
        'title' => 'Settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('registration_registrations_settings_form', 0, 1),
        'access callback' => 'registration_administer_registrations_access',
        'access arguments' => array(0, 1),
        'file' => 'includes/registration.forms.inc',
        'weight' => 9,
        'type' => MENU_LOCAL_TASK,
      );
      $items[$type . '/%entity_object/registrations/broadcast'] = array(
        'load arguments' => array($type),
        'title' => 'Email Registrants',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('registration_registrations_broadcast_form', 0, 1),
        'access callback' => 'registration_administer_registrations_access',
        'access arguments' => array(0, 1),
        'file' => 'includes/registration.forms.inc',
        'weight' => 10,
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  if (module_exists('devel')) {
    $items['registration/%registration/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('node', 1),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file path' => drupal_get_path('module', 'devel'),
      'file' => 'devel.pages.inc',
      'weight' => 100,
    );
    $items['registration/%registration/devel/load'] = array(
      'title' => 'Load',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function registration_permission() {
  return array(
    'administer registration' => array(
      'title' => t('Administer registration'),
      'description' => t('Perform administration tasks for Registrations.'),
      'restrict access' => TRUE,
    ),
    'administer registration types' => array(
      'title' => t('Administer registration types'),
      'description' => t('Manage registration types, fields, and display settings.'),
      'restrict access' => TRUE,
    ),
    'view registration' => array(
      'title' => t('View registrations'),
    ),
    'add registration' => array(
      'title' => t('Add registrations'),
    ),
    'delete own registration' => array(
      'title' => t('Delete own registrations'),
    ),
  );
}

/**
 * Display a registration.
 *
 * @param  $registration
 *   A Fully loaded registration object.
 *
 * @return array()
 */
function registration_view(Registration $registration) {
  return $registration->view();
}
/**
 * Page title callback.
 */
function registration_page_title(Registration $registration) {
  $title = '';
  // use the entity title in the registration page title
  if ($entity = $registration->entity) {
    $title = t('Registration for @title', array(
      '@title' => entity_label($registration->entity_type, $entity))
    );
  }
  return $title;
}

/**
 * Access callback for registration_register_page().
 */
function registration_register_page_access($entity_type, $entity) {
  $ret = FALSE;

  if (registration_get_entity_registration_type($entity_type, $entity)) {
    if (user_access('administer registration') || user_access('add registration')) {
      list($id,,) = entity_extract_ids($entity_type, $entity);
      $settings = registration_entity_settings($id, $entity_type);
      if ($settings['status']) {
        $ret = TRUE;
      }
    }
  }

  return $ret;
}

/**
 * Access callback for registration_registrations_page().
 */
function registration_administer_registrations_access($entity_type, $entity) {
  $ret = FALSE;
  if (registration_get_entity_registration_type($entity_type, $entity)) {
    if (user_access('administer registration')) {
      $ret = TRUE;
    }
  }

  return $ret;
}

/**
 * Page callback for adding a registration.
 */
function registration_register_page($entity_type, $entity) {
  list($entity_id, ,) = entity_extract_ids($entity_type, $entity);
  if (registration_status($entity_type, $entity_id)) {
    $registration_type = registration_get_entity_registration_type($entity_type, $entity);
    $registration = entity_get_controller('registration')->create(array('type' => $registration_type));
    $registration->entity_id = $entity_id;
    $registration->entity_type = $entity_type;
    $registration->entity = $entity;
    return drupal_get_form('registration_form', $registration);
  }
  else {
    return t('Sorry, registrations are no longer available for %name',
      array('%name' => entity_label($entity_type, $entity)));
  }
}

/**
 * Page callback for viewing registrations
 */
function registration_registrations_page($entity_type, $entity) {
  $header = array(
    array('data' => t('id'), 'field' => 'registration_id', 'type' => 'property', 
        'specifier' => 'registration_id'),
    array('data' => t('Email'), 'field' => 'mail', 'type' => 'property', 
        'specifier' => 'mail'),
    array('data' => t('Created By'), 'field' => 'author_uid', 
        'type' => 'property', 'specifier' => 'author_uid'),
    array('data' => t('Count'), 'field' => 'count', 'type' => 'property', 
        'specifier' => 'count'),
    array('data' => t('Created'), 'field' => 'created', 'sort' => 'desc', 
        'type' => 'property', 'specifier' => 'created'),
    array('data' => t('Actions')),
  );

  list($entity_id, ,) = entity_extract_ids($entity_type, $entity);
  $label = entity_label($entity_type, $entity);

  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'registration')
    ->propertyCondition('entity_id', $entity_id)
    ->propertyCondition('entity_type', $entity_type)
    ->pager(20)
    ->tableSort($header)
    ->execute();
    
  if (!empty($result['registration'])) {
    $registrations = registration_load_multiple(array_keys($result['registration']));

    $rows = array();
    foreach ($registrations as $registration) {
      $author = '';
      if ($registration->author_uid) {
        $author = user_load($registration->author_uid);
        $author = l($author->name, 'user/' . $author->uid);
      }
      $actions = array(
        l('View', 'registration/' . $registration->registration_id),
        l('Edit', 'registration/' . $registration->registration_id . '/edit'),
        l('Delete', 'registration/' . $registration->registration_id . '/delete'),
      );
      $rows[] = array(
        l($registration->registration_id, 'registration/' . $registration->registration_id),
        l($registration->mail, 'mailto:' . $registration->mail),
        $author,
        $registration->count,
        format_date($registration->created),
        implode(' | ', $actions)
      );
    }

    $settings = registration_entity_settings($entity_id, $entity_type);
        
    $table = array(
      'header' => $header,
      'rows' => $rows
    );
    if ($settings['capacity'] != 0) {
      $table['caption'] = t('List of registrations for %title. !count of !capacity slots are filled.', 
        array(
          '%title' => $label,
          '!count' => '<strong>' . registration_event_count($entity_id, $entity_type) . '</strong>',
          '!capacity' => '<strong>' . $settings['capacity'] . '</strong>'
        ));
    } else {
      $table['caption'] = t('List of registrations for %title. !count slots are filled.', 
        array(
          '%title' => $label,
          '!count' => '<strong>' . registration_event_count($entity_id, $entity_type) . '</strong>',
        ));
    }

    $out = theme('table', $table) . theme('pager');
  }
  else {
    $out = t('There are no registrants for %name',
        array('%name' => $label));
  }

  return $out;
}

/**
 * Helper to determine if an entity has any slots left.
 *
 * @param $entity_id
 * @param $entity_type
 * @param int $slots
 *   Used if validating a new registration. The number of slots attemping to fill.
 * @return bool
 */
function registration_has_room($entity_id, $entity_type, $slots = 0) {
  $ret      = TRUE;
  $settings = registration_entity_settings($entity_id, $entity_type);
  $capacity = $settings['capacity'];
  if ($capacity) {
    $count = registration_event_count($entity_id, $entity_type) + $slots;
    if (($capacity - $count) < 1) {
      $ret = FALSE;
    }
  }

  return $ret;
}

/**
 * Return the number of registrations for a given entity.
 *
 * @param int $nid
 *
 * @return int
 */
function registration_event_count($entity_id, $entity_type) {
  $count = &drupal_static(__FUNCTION__, FALSE);
  if (!$count) {
    $count = db_query("SELECT sum(count) FROM {registration} WHERE entity_id = :entity_id AND entity_type = :entity_type",
      array(':entity_id' => $entity_id, ':entity_type' => $entity_type)
    )->fetchField();    
  }
  return $count;
}

/**
 * Implements hook_entity_delete().
 *   Delete registrations and settings for this entity.
 */
function registration_entity_delete($entity, $type) {
  list($entity_id) = entity_extract_ids($type, $entity);
  db_delete('registration')
    ->condition('entity_id', $entity_id)
    ->condition('entity_type', $type)
    ->execute();
  db_delete('registration_entity')
    ->condition('entity_id', $entity_id)
    ->condition('entity_type', $type)
    ->execute();
}

/**
 * Return all registration settings for a given entity.
 *
 * @param string $nid
 *
 * @return array
 */
function registration_entity_settings($entity_id, $entity_type) {
  // @TODO: Add static variable handling.
  $result = db_select('registration_entity', 're')
    ->fields('re')
    ->condition('entity_id', $entity_id, '=')
    ->condition('entity_type', $entity_type, '=')
    ->execute()
    ->fetchAssoc();

  if ($result) {
    $result['settings'] = unserialize($result['settings']);   
  }
  
  return $result;
}

/**
 * Implements hook_theme().
 */
function registration_theme() {
  return array(
    'registration' => array(
      'variables' => array('registration' => NULL),
    ),
    'registration_link' => array(
      'variables' => array('label' => NULL, 'path' => NULL),
    ),
  );
}

/**
 * Theme handler for registrations.
 *
 * @param array $variables
 *   Contains a complete registration object.
 */
function theme_registration($variables) {
  $registration = $variables['registration'];
  $output = '<div><label>' . t('Email') . '</label>' . $registration->mail . '</div>';
  if ($entity = $registration->entity) {
    $label = entity_label($registration->entity_type, $entity);
    $uri = entity_uri($registration->entity_type, $entity);
    $output .= '<div><label>' . $registration->entity_type . "</label>" .
        l($label, $uri['path']) . '</div>';
  }

  $output .= '<div><label>' . t('Count') . '</label>' . $registration->count . '</div>';
  $output .= '<div><label>' . t('Created') . '</label>' . format_date($registration->created) . '</div>';

  return $output;
}

/**
 * Theme handler for registration links.
 *
 * @param array $variables
 *   Contains the label and path for the link.
 */
function theme_registration_link($variables) {
  $output = '';
  $registration_label = $variables['label'];
  $registration_path = $variables['path'];
  
  $output .= l($registration_label, $registration_path);

  return $output;
}

/**
 * Implements hook_mail().
 */
function registration_mail($key, &$message, $params) {
  $subject = $params['subject'];
  $body = $params['message'];
  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
  $message['body'][] = drupal_html_to_text($body);
}

/**
 * Send an email to all registrations for a given entity.
 *
 * @param object $entity
 */
function registration_send_broadcast($entity_type, $entity_id, $subject, $message) {
  global $language;

  // grab registration entity settings
  $settings = registration_entity_settings($entity_id, $entity_type);
  $from = $settings['settings']['from_address'];

  // grab all registrations
  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'registration')
    ->propertyCondition('entity_id', $entity_id)
    ->propertyCondition('entity_type', $entity_type)
    ->execute();

  if (!empty($entities)) {
    $recipients = array();

    $params = array(
      'subject' => $subject,
      'message' => $message,
    );

    // load registrations and build an array of recipients
    $registrations = registration_load_multiple(
      array_keys($entities['registration'])
    );

    // send the email to each registrant and communicate results
    $success_count = 0;
    foreach ($registrations as $registration) {
      $recipients[] = $registration->mail;
      $result = drupal_mail('registration', 'broadcast',
        $registration->mail, $language, $params, $from
      );
      if ($result['result']) {
        $success_count++;
      }
      else {
        watchdog('registration', 'Failed to send registration broadcast email to %email.',
          array('%email' => $registration->mail), 'WATCHDOG_ERROR'
        );
      }
    }

    if ($success_count) {
      drupal_set_message(t('Registration broadcast sent to @count registrants.',
        array('@count' => $success_count)
      ));
      watchdog('registration', 'Registration broadcast sent to @count registrants.',
        array('@count' => $success_count)
      );
    }
  }
  else {
    drupal_set_message(
      t('There are no participants registered for this %type.', 
          array('%type' => $entity_type)),
      $type = 'warning'
    );
  }
}

/**
 * Update an entity's registration settings.
 *
 * @param int $nid 
 * @param array $settings
 *    Associative array containing additional entity registration settings.
 *    Keys are status, capacity, send_reminder, reminder_date, reminder_template
 *    and an associative array of additional settings.
 */
function registration_update_entity_settings($entity_id, $entity_type, $settings) {
  // insert or update registration entity settings
  db_merge('registration_entity')
    ->key(array(
      'entity_id' => $entity_id,
      'entity_type' => $entity_type
    ))
    ->fields($settings)
    ->execute();

  drupal_set_message(t('Registration settings have been saved.'));  
}

/**
 * Implements hook_cron().
 */
function registration_cron() {
  //@TODO: need to have a sensible batch limit, passed in as a limit param
  
  // grab all registrations that have reminders set for this day
  $results = db_select('registration_entity', 're')
    ->fields('re')
    ->condition('send_reminder', 1)
    ->condition('reminder_date', date('Y-m-d 00:00:00'))
    ->range(0, 10)
    ->execute()
    ->fetchAllAssoc('entity_id');

  foreach ($results as $result) {
    $entity = entity_load_single($result->entity_type, $result->entity_id);
    $message = $result->reminder_template;
    if (module_exists('token')) {
      $message = token_replace($message, array($result->entity_type => $entity));
    }
    $subject = 'Reminder for ' . entity_label($result->entity_type, $entity);
    registration_send_broadcast($result->entity_type, $result->entity_id, $subject, $message);
    
    // set reminder flag to off
    db_update('registration_entity')
      ->fields(array('send_reminder' => 0))
      ->condition('entity_id', $result->entity_id)
      ->condition('entity_type', $result->entity_type)
      ->execute();
  }
}

/**
 * Check status of registrations on an entity based on status, open, and close
 * dates, and capacity.
 *
 * Modules may implement hook_registration_status() to alter the status at
 * runtime.
 *
 * @param $entity_type Entity type of entity to check status.
 * @param $entity_id Entity ID of entity to check status.
 * @param $reset Whether to recheck status for the same page session.
 *
 * @return Whether new registrations are accepted.
 */
function registration_status($entity_type, $entity_id, $reset = FALSE) {
  $checked = &drupal_static(__FUNCTION__, array());

  if (!$reset && isset($checked[$entity_type][$entity_id])) {
    return $checked[$entity_type][$entity_id];
  }

  $settings = registration_entity_settings($entity_id, $entity_type);
  $status = $settings['status'];
  $open = isset($settings['open']) ? strtotime($settings['open']) : NULL;
  $close = isset($settings['close']) ?  strtotime($settings['close']) : NULL;
  $now = REQUEST_TIME;

  // only explore other settings if main status is enabled
  if ($status) {
    // check capacity
    if (!registration_has_room($entity_id, $entity_type)) {
      $status = FALSE;
    }
    // check open/close date range
    else if(
      (isset($open) && isset($close)) &&
      !($now >= $open && $now <= $close)) {
      $status = FALSE;
    }
  }


  // allow other mods to override status
  $context = array(
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
    'settings' => $settings
  );
  if ($altered = drupal_alter('registration_status', $status, $context)) {
    $status = $altered;
  }

  $checked[$entity_type][$entity_id] = $status;

  return $status;
}

/**
 * Get the registration type bundle for a given entity.
 *
 * @param string $entity_type
 * @param object $entity
 *
 * @return string registration type
 */
function registration_get_entity_registration_type($entity_type, $entity) {
  $ret = FALSE;
  $fields = field_read_fields(array('type' => 'registration'));
  foreach($fields as $field) {
    if (isset($entity->{$field['field_name']})) {
      $items = field_get_items($entity_type, $entity,$field['field_name']);
      // we're assuming there's only a single value in this field
      if (!empty($items) && count($items) == 1) {
        $ret = $items[0]['registration_type'];
      }
    }
  }

  return $ret;
}

/**
 * Return all registration field instances.
 * 
 * @return array list of field instances
 */
function registration_get_registration_instances() {
  $registration_fields = field_read_fields(array('type' => 'registration'));

  $registration_instances = array();
  if (!empty($registration_fields)) {
    $registration_instances = field_read_instances(array(
      'field_name' => array_keys($registration_fields)
    ));
  }

  return $registration_instances;
}

/**
 * Implements hook_views_api().
 */
function registration_views_api() {
  return array(
    'api' => 2, 
    'path' => drupal_get_path('module', 'registration') . '/includes/views',
  );
}

/**
 * Implement hook_token_info().
 */
function registration_token_info() {
  $registration['entity'] = array(
    'name' => t("Registration Host Entity"),
    'description' => t("The host entity for the registration."),
  );
  return array(
    'types' => array(),
    'tokens' => array('registration' => $registration),
  );
}


/**
 * Implements hook_tokens().
 */
function registration_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if ($type == 'registration' && !empty($data['registration'])) {
    $registration = $data['registration'];
    $wrapper = entity_metadata_wrapper('registration', $data['registration']);

    if ($entity_tokens = token_find_with_prefix($tokens, 'entity')) {
      $entity = $wrapper->entity->value();
      return token_generate($registration->entity_type, $entity_tokens,
        array($registration->entity_type => $entity), $options);
    }
  }
}

/**
 * Determine is a given email is already registered for an event.
 *
 * @param Registration $registration
 * @param string $mail
 *
 * @return bool
 */
function registration_is_registered(Registration $registration, $mail) {
  $query = db_select('registration', 'r')
			->condition('entity_id', $registration->entity_id)
      ->condition('entity_type', $registration->entity_type)
			->condition('mail', $mail);

  // exclude existing registration
  if (isset($registration->registration_id)) {
    $query->condition('registration_id', $registration->registration_id, '<>');
  }

  $count = $query->countQuery()->execute()->fetchField();
  return $count > 0;
}
